<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fcdx01.github.io</id>
    <title>Gridea</title>
    <updated>2023-06-11T10:18:22.360Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fcdx01.github.io"/>
    <link rel="self" href="https://fcdx01.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://fcdx01.github.io/images/avatar.png</logo>
    <icon>https://fcdx01.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Java 5]]></title>
        <id>https://fcdx01.github.io/post/java-5/</id>
        <link href="https://fcdx01.github.io/post/java-5/">
        </link>
        <updated>2023-06-11T01:41:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="跳转控制语句break">跳转控制语句break</h2>
<p>break 语句用于<mark>终止某个语句块的执行</mark>，一般使用在switch 或者循环[for , while , do-while]中</p>
<ol>
<li>break语句可以指定推出哪一层。</li>
<li>label1是标签，名字由程序员而定。</li>
<li>break后面指定到哪个label就退出到哪里。</li>
<li>在实际的开发中，尽量不要用标签。</li>
<li>如果没有指定break，默认退出最近的循环体。</li>
</ol>
<pre><code>public class redom {
	public static void main(String[] args){
		label1:
		for(int i = 0; i &lt; 4 ; i++){
		label2:
			for(int j = 0; j &lt; 10; j++){
				if(i == 2){
					break label1;
				}
				System.out.println(&quot;i = &quot; + i);
			}
		}
	}
}
</code></pre>
<p><font color="red">小练习</font></p>
<pre><code>判断输入的名字与密码
import java.util.Scanner;
public class Text3{
	public static void main(String[] args){
		Scanner input = new Scanner(System.in);
		String name = &quot;&quot;;
		String pwd = &quot;&quot;;
		int n = 3;
		for(int i = 0 ; i &lt; 3 ; i++){
			System.out.println(&quot;请输入名字：&quot;);
			name = input.next();
			System.out.println(&quot;请输入密码：&quot;);
			pwd = input.next();
			if(&quot;关毅龙&quot;.equals(name) &amp;&amp; &quot;666&quot;.equals(pwd)) //equals判断字符串是否相等
			{
				System.out.println(&quot;恭喜你登录成功~&quot;);
				break;
			}
			n--;
			System.out.println(&quot;抱歉登录失败你还有&quot;+ n +&quot;次登录机会哟&quot;);
		}
	}
}
</code></pre>
<h2 id="跳转控制语句continue">跳转控制语句continue</h2>
<p><strong>continue 语句用于结束本次循环，继续执行下一次循环。</strong><br>
continue 语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环, 这个和前面的标签的使用的规则一样.</p>
<h2 id="跳转控制语句return">跳转控制语句return</h2>
<p>return 使用在方法，表示跳出所在的方法，在讲解方法的时候，会详细的介绍，这里我们简单的提一下。注意：如果return 写在main 方法，退出程序..Return01.java</p>
<h1 id="数组">数组</h1>
<h2 id="使用方式-静态初始化">使用方式-静态初始化</h2>
<p>数据类型 数组名 【】 = {元素值，元素值} 或 数据类型  【】数组名  = {元素值，元素值}</p>
<pre><code>eg：
double [] a = {......}
</code></pre>
<h2 id="使用方式-动态初始化">使用方式-动态初始化</h2>
<p><mark>第一种</mark><br>
数据类型 数组名 【】= new 数据类型【大小】或数据类型 【】 数组名 = new 数据类型【大小】</p>
<pre><code>eg:
double scores [] = new double [5] //double类型的5个
</code></pre>
<p><mark>第二种</mark><br>
数据类型 数组名 【】；或 数据类型 【】 数组名; <font color="red">声明数组</font><br>
数据名 = new 数据类型 【】；<font color="blue">分配内存空间，可以存放数据</font></p>
<h2 id="数组细节">数组细节</h2>
<ol>
<li>数组是多个相同类型数据的组合，实现对这些数据的统一管理</li>
<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。</li>
<li>数组创建后，如果没有赋值，有默认值<br>
int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null</li>
<li>使用数组的步骤1. 声明数组并开辟空间2 给数组各个元素赋值3 使用数组</li>
<li>数组的下标是从0 开始的。</li>
<li>数组下标必须在指定范围内使用，否则报：下标越界异常，比如<br>
int [] arr=new int[5]; 则有效下标为0-4</li>
<li>数组属引用类型，数组型数据是对象(object)</li>
</ol>
<h2 id="数组应用案例">数组应用案例</h2>
<ol>
<li>创建一个char 类型的26 个元素的数组，分别放置'A'-'Z'。使用for 循环访问所有元素并打印出来。提示：char 类型数据运算'A'+2 -&gt; 'C'</li>
</ol>
<pre><code>	public static void main(String[] args){
		char [] chars = new char[26];
		for(int i = 0; i&lt;chars.length; i++){
			chars[i] = (char)('A' + i); //'A'+i是int类型，需要强转
		}
		System.out.println(&quot;========&quot;);
		//循环输出
		for(int i = 0; i &lt; chars.length; i++){
			System.out.print(chars[i] + &quot;\t&quot;);
		}
	}
</code></pre>
<ol start="2">
<li>请求出一个数组int[]的最大值{4,-1,9, 10,23}，并得到对应的下标。</li>
</ol>
<pre><code>public static void main(String[] args){
		int [] arr = {4, 9, 888, 1025, 22, 10, 3};
		int max = arr[0];
		int maxIndex = 0;
		for(int i = 0; i &lt; arr.length; i++){
			if(max &lt; arr[i]){
				max = arr[i];
				maxIndex = i+1;
			}
		}
		System.out.println(&quot;最大的数是&quot; + max + &quot;是第&quot;+ maxIndex +&quot;位&quot;);
	}
</code></pre>
<h2 id="数组赋值机制">数组赋值机制</h2>
<ol>
<li>基本数据类型赋值，这个值就是具体的数据，而且相互不影响。<br>
int n1 = 2; int n2 = n1;</li>
<li><font color="red">数组在默认情况下是引用传递，赋的值是地址。</font><br>
看一个案例，并分析数组赋值的内存图(重点, 难点. )。<br>
int[] arr1 = {1,2,3};<br>
int[] arr2 = arr1;<br>
arr2[0] = 5;<br>
此时arr1[0]的值也会变</li>
</ol>
<h3 id="数组的拷贝">数组的拷贝</h3>
<p>此时arr1与arr2互不影响</p>
<pre><code>public static void main(String[] args){
		int [] arr1 = {1,2,3};
		int [] arr2 = new int [arr1.length];
		for(int i = 0; i &lt; arr1.length; i++){
			arr2[i] = arr1[i];
		}
		for(int i = 0; i &lt; arr1.length; i++){
			System.out.println(arr2[i]);
		}
		arr2[2] = 1;
		System.out.println(arr1[2]);
	}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java学习4]]></title>
        <id>https://fcdx01.github.io/post/java-xue-xi-4/</id>
        <link href="https://fcdx01.github.io/post/java-xue-xi-4/">
        </link>
        <updated>2023-05-26T07:21:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="循环语法">循环语法</h1>
<h2 id="for循环">for循环</h2>
<p><strong>基本语法</strong><br>
for(<font color='red'>循环变量初始化</font>；<font color='yellow'>循环变量初始化</font>；<font color='green'>循环变量迭代</font>){<br>
  <font color='blue'>循环操作</font>（可以多条语句）；<br>
}</p>
<ol>
<li>for 关键字，表示循环控制</li>
<li>for 有四要素: (1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</li>
<li>循环操作, 这里可以有多条语句，也就是我们要循环执行的代码</li>
<li>如果循环操作(语句) 只有一条语句，可以省略{}, 建议不要省略<br>
<strong>编程思想（技巧）</strong><br>
<mark>1. 化繁为简 ： 即将复杂的需求，拆解成简单的需求，逐步完成。</mark><br>
<mark>2. 先死后活 ： 先考虑固定的值，然后转成可以灵活变化的值。</mark></li>
</ol>
<h2 id="while循环">while循环</h2>
<p><strong>基本语法</strong><br>
while(<font color='red'>循环条件</font>){<br>
  循环体（语句）；<br>
  循环变量迭代；<br>
}</p>
<ol>
<li>while循环也有四要素</li>
<li>只是四要素放的位置和for不一样</li>
</ol>
<h2 id="do-while循环">do while循环</h2>
<pre><code>import java.util.Scanner;
public class DoWhile{
	public static void main(String[] args){
		char answer ;
		Scanner scanner = new Scanner(System.in);
		do{
			System.out.println(&quot;你还钱吗？&quot;);
			answer = scanner.next().charAt(0);
			if (answer == 'N') {
				System.out.println(&quot;不还钱？ 看我打你&quot;);
			}	
		}while(answer != 'Y');
	}
}
</code></pre>
<h2 id="循环的嵌套">循环的嵌套</h2>
<pre><code>import java.util.Scanner;
public class ForQT{
	public static void main(String[] args){
	Scanner scanner = new Scanner(System.in);
	for(int i = 1; i &lt;= 9; i++){
		for(int j = 1; j &lt;= i; j++){
			System.out.print(i + &quot;*&quot; + j + &quot;=&quot; + (i*j));
			System.out.print(&quot;\t&quot;);
		}
		System.out.println(&quot;\n&quot;);
	}
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java学习3]]></title>
        <id>https://fcdx01.github.io/post/java-xue-xi-3/</id>
        <link href="https://fcdx01.github.io/post/java-xue-xi-3/">
        </link>
        <updated>2023-05-25T07:04:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="分支控制">分支控制</h1>
<h2 id="分支控制if-else">分支控制if-else</h2>
<h3 id="单分支">单分支</h3>
<p>基本语法：<br>
if(条件表达式){<br>
执行代码快：（可以有多条语句）<br>
}</p>
<ul>
<li>说明：当条件表达式为ture时，就会执行{}的代码，如果为false,就不执行.<br>
特别说明，如果{}中只有一条语句，则可以不用{}，韩老师建议写上{}</li>
</ul>
<h3 id="双分支">双分支</h3>
<p>基本语法：<br>
if(条件表达式){<br>
执行代码块1；<br>
}<br>
else{<br>
执行代码块2；<br>
}<br>
说明：当条件表达式成立，即执行代码块1，否则执行代码块2如果执行代码块只<br>
有一条语句，则{}可以省略，否则，不能省略<br>
<mark>代码示例</mark></p>
<pre><code>import java.util.Scanner;
public class IfElse{
	public static void main(String[] args){
		Scanner scanner = new Scanner(System.in);
		System.out.println(&quot;请输入两个数 来判断是否能被3和5整除&quot;);
		int a = scanner.nextInt();
		int b = scanner.nextInt();
		int sum = a + b;
		System.out.println(&quot;两数和为&quot; + sum);
		if(sum % 3 == 0 &amp;&amp; sum % 5 == 0){
			System.out.println(&quot;可以被整除&quot;);
		}
		else{
			System.out.println(&quot;抱歉不能&quot;);
		}
	}
}
class Year{
	public static void main(String[] args){
	Scanner scanner = new Scanner(System.in); //此处不能省略 还是要new一个 这与上面的不能共用
	System.out.println(&quot;请输入一个年份&quot;);
	int year = scanner.nextInt();
	if((year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0){
		System.out.println(year + &quot; 是闰年&quot;);
	}else{
		System.out.println(year + &quot;不是 闰年&quot;);
	}
	}
}
</code></pre>
<p><strong>嵌套分支</strong><br>
在一个分支结构中又完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内<br>
层分支外面的分支结构称为外层分支。老师建议：不要超过3层（可读性不好）。</p>
<h2 id="switch分支语句">switch分支语句</h2>
<p>≥老韩解读switch<br>
1.switch关键字，表示swtich分支<br>
2.表达式对应一个值<br>
3.case常量1：当表达式的值等于常量1，就执行语句块1<br>
4.break:表示退出swtich<br>
5.如果和case常量1匹配，就执行语句块1，如果没有匹配，就继续匹配ca5e常量2<br>
6.如果一个都没有匹配上，执行default<br>
<em>注意</em>如果case后面不带break则会<mark>穿透</mark>直接执行下一个且不进行判断。<br>
<strong>Swithch的细节</strong></p>
<ol>
<li><mark>表达式数据类型，应和case后的常量类型一致</mark>，或者是可以<mark>自动转成</mark>可以相互比较的<br>
类型，比如输入的是字符，而常量是int</li>
<li>switch(表达式)中表达式的返回值必须是：(byte,short,int,char,enum[枚<br>
举]，String)</li>
</ol>
<pre><code>double c = 1.1;
		switch(c){     //错误
			case 1.1:  //错误
				System.out.println(&quot;ok&quot;);
				break;
		}
</code></pre>
<ol start="3">
<li>case子句中的值必须是常量，不能是变量</li>
<li>default子句是可选的，当没有匹配的case时，执行default</li>
<li>break语句用来在执行完一个case分支后使程序跳出switch语句块；如果没有写break，程序会执行到switch结尾<br>
<strong>练习</strong></li>
</ol>
<pre><code>import java.util.Scanner;
public class Switch02{
	public static void main(String[] args){
		Scanner scanner = new Scanner(System.in);
		System.out.println(&quot;输入月份&quot;);
		int mouth = scanner.nextInt();
		switch(mouth){
			case 1:
			case 2:
			case 12:
				System.out.println(&quot;冬季&quot;);
				break;
			case 3:
			case 4:
			case 5:
				System.out.println(&quot;春季&quot;);
				break;
			case 6:
			case 7:
			case 8:
				System.out.println(&quot;夏季&quot;);
				break;
			case 9:
			case 10:
			case 11:
				System.out.println(&quot;秋季&quot;);
				break;
			default:
				System.out.println(&quot;别瞎输入&quot;);
		}
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java学习2]]></title>
        <id>https://fcdx01.github.io/post/java-xue-xi-2/</id>
        <link href="https://fcdx01.github.io/post/java-xue-xi-2/">
        </link>
        <updated>2023-05-22T04:49:37.000Z</updated>
        <content type="html"><![CDATA[<h2 id="关系运算符">关系运算符</h2>
<pre><code>        int a = 9;
		int b = 8;
		System.out.println(a&gt;b); //T
		System.out.println(a&gt;=b); //T
		boolean flag = (a&gt;b);
		System.out.println(flag);

        true
        true
        true
</code></pre>
<h2 id="逻辑运算符">逻辑运算符</h2>
<p><strong>逻辑运算规则</strong></p>
<ol>
<li>a&amp;b : &amp; 叫逻辑与：规则：<mark>如果第一个条件为false，则后面的任然会判断</mark>。当a 和b 同时为true ,则结果为true, 否则为false</li>
<li>a&amp;&amp;b : &amp;&amp; 叫短路与：规则：<mark>如果第一个条件为false，则后面的不会执行</mark>。当a 和b 同时为true ,则结果为true,否则为false</li>
<li>a|b : | 叫逻辑或，规则：<mark>如果第一个条件为false，则后面的任然会判断</mark>。当a 和b ，有一个为true ,则结果为true,否则为false</li>
<li>a||b : || 叫短路或，规则：<mark>如果第一个条件为false，则后面的不会执行</mark>。当a 和b ，有一个为true ,则结果为true,否则为false</li>
<li>!a : 叫取反，或者非运算。当a 为true, 则结果为false, 当a 为false 是，结果为true</li>
<li>a^b: 叫逻辑异或，当a 和b 不同时，则结果为true, 否则为false</li>
</ol>
<h2 id="三元运算符">三元运算符</h2>
<p><strong>三元运算符细节</strong><br>
具体没啥细节 也就是数据类型的细节例如<em>int不能接受double类型的也就是</em></p>
<pre><code>int a = c &gt; b ? 1.1 : 3.3;
因为a是int类型 接收不了double类型的
</code></pre>
<p>1.运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如右表，上一行运算符总优先于下一行。<br>
2.只有单目运算符、赋值运算符是从右向左运算的，<br>
<img src="https://fcdx01.github.io/post-images/1684932900138.png" alt="" loading="lazy"></p>
<h2 id="标识符命名规则">标识符命名规则</h2>
<p>1.由26个英文字母大小写，0-9，或$组成<br>
2.数字不可以开头。int3ab=1:/错误<br>
3.不可以使用关键字和保留字，但能包含关键字和保留字。<br>
4.Java中严格区分大小写，长度无限制。int totalNum=10;intn=90;<br>
5.标识符不能包含空格。int a b=90;</p>
<h2 id="标识符命名规范">标识符命名规范</h2>
<p>1.包名：多单词组成时所有字母都小写：aaa.bbb.ccc/比如com.hsp.crm<br>
2.类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz<br>
比如：TankShotGame<br>
3.变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个<br>
单词首字母大写：xxxYyyZzz<br>
比如：tankShotGame<br>
4.常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX YYY ZZZ<br>
比如：定义一个所得税率TAX RATE<br>
5.后面我们学习到类，包，接口，等时，我们的命名规范要这样遵守，更加详细的<br>
看文档。</p>
<h2 id="键盘输入">键盘输入</h2>
<p>首先需要先导入java包<br>
然后再才可以使用Scanner</p>
<pre><code>import java.util.Scanner; //将java.util下的Scanner类导入
public class InPut{
	public static void main(String[] args){
		//创建Scanner对象
		Scanner scanner = new Scanner(System.in);
		System.out.println(&quot;请输入名字&quot;);
		String name = scanner.next(); //接受用户输入
		System.out.println(&quot;请输入年龄&quot;);
		int age = scanner.nextInt(); //接受用户输入
		System.out.println(&quot;请输入薪水&quot;);
		double s = scanner.nextDouble(); //接受用户输入
		System.out.println(&quot;名字=&quot; + name + &quot;年龄=&quot; + age + &quot;薪水=&quot; + s);
	}
}
</code></pre>
<h2 id="进制的介绍">进制的介绍</h2>
<p>1.二进制：0,1 ，满2 进1.以0b 或0B 开头。<br>
2.十进制：0-9 ，满10 进1。<br>
3.八进制：0-7 ，满8 进1. 以数字0 开头表示。<br>
4.十六进制：0-9 及A(10)-F(15)，满16 进1. 以0x 或0X 开头表示。此处的A-F 不区分大小写。<br>
<strong>位运算</strong><br>
<em>原码、补码、反码</em><br>
1.二进制的最高位是符号位：0表示正数，1表示负数（老韩口诀：0-&gt;0 1-&gt;-）<br>
2.正数的原码，反码，补码都一样（三码合一）<br>
3.负数的反码=它的原码符号位不变，其它位取反(0-&gt;1,1-&gt;0)<br>
4.负数的补码=它的反码+1，负数的反码=负数的补码-1<br>
5.0的反码，补码都是0<br>
6.java没有无符号数，换言之，java中的数都是有符号的<br>
7.在计算机运算的时候，都是<mark>以补码的方式来运算的</mark>，<br>
8.当我们看运算结果的时候，要看他的<mark>原码</mark><br>
按位与&amp;   ：   两位全为1，结果为1，否则为0<br>
按位或|     ：   两位有一个为1，结果为1，否则为0<br>
按位异或^:      两位一个为0，一个为1，结果为1，否则为0<br>
按位取反~:      0-》1，1-》0<br>
<strong>位运算符</strong><br>
还有3 个位运算符&gt;&gt;、&lt;&lt; 和&gt;&gt;&gt; , 运算规则:</p>
<ol>
<li>算术右移&gt;&gt;：低位溢出,符号位不变,并用符号位补溢出的高位</li>
<li>算术左移&lt;&lt;: 符号位不变,低位补0</li>
<li>&quot;&gt;&gt;&gt;&quot;逻辑右移也叫无符号右移,运算规则是: 低位溢出，高位补0<br>
例子：<br>
int a=1&gt;&gt;2; //1 =&gt; 00000001 =&gt; 00000000 本质1 / 2 / 2 =0<br>
int c=1&lt;&lt;2; //1 =&gt; 00000001 =&gt; 00000100 本质1 * 2 * 2 = 4</li>
</ol>
<p>测试：<br>
String str = &quot;18.8&quot;;<br>
double d1 = Double.parseDouble(str);<br>
char c1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 学习]]></title>
        <id>https://fcdx01.github.io/post/java-xue-xi/</id>
        <link href="https://fcdx01.github.io/post/java-xue-xi/">
        </link>
        <updated>2023-05-19T02:38:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="基本数据类型的转换">基本数据类型的转换</h1>
<h2 id="自动类型转换">自动类型转换</h2>
<ol>
<li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。</li>
<li>当我们把精度大的数据类型复制给精度小的数据类型时，就会报错，反之会进行自动的类型转换。</li>
<li>(byte,shot)和char之间不会相互自动转换。</li>
<li><mark>byte，shot，char他们三者可以计算，在计算时首先为int类型。</mark><br>
<strong>注意</strong></li>
</ol>
<pre><code>        char n1 = '男';
        char n2 = '女';
        System.out.println(n1+n2);

</code></pre>
<hr>
<pre><code>        输出为男女acs码相加的值
</code></pre>
<ol>
<li>boolean不参与转换</li>
<li>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型</li>
</ol>
<pre><code>byte b2 = 11;
short b3 = 2;   
int s2 = b2 + b3;     需要用int来接受 因为short byte 进行运算时就会自动转换成 int
</code></pre>
<p><em>byte short int 在一起进行运算</em> 其结果只能用 <mark>double接收</mark></p>
<h2 id="强制类型转换">强制类型转换</h2>
<p><strong>介绍</strong> ：<em>可能造成精度的降低或溢出</em> <mark>需格外小心</mark></p>
<pre><code>		int n1 = (int)1.9;
		System.out.println(&quot;n1&quot; + &quot;:&quot; + n1); //1
		int n2 = 2000;
		byte b1 = (byte)n2;
		System.out.println(&quot;b1&quot; + &quot;:&quot; + b1); //造成数据溢出-48
</code></pre>
<p><strong>细节</strong> ：</p>
<ol>
<li>当进行数据的大小从大--&gt;小，就需要使用到强制转换</li>
<li>强制符号治针对最近的操作数有效，往往会使用小括号提升优先级</li>
</ol>
<pre><code>        int x = (int)10*3.5+6*1.5;//编译错误 因为强制转换只会转换为最近的操作数
		int y = (int)(10*3.5+6*1.5); //这样就可以了 int(44.0)-&gt;44
		System.out.println(y);
</code></pre>
<ol start="3">
<li>char类型可以保存int常量值，但不能保存int的变量值，需要强转</li>
</ol>
<pre><code>        char c1 = 100;
		int m = 100;
		char c2 = m; //错误
		char c3 = (char)m;
		System.out.println(c3); //d
		System.out.println(c1); //d
</code></pre>
<ol start="4">
<li>byte和short类型再进行运算时，当做int类型处理</li>
</ol>
<h3 id="强制转换为string类型">强制转换为String类型</h3>
<p><strong>直接在后面加“”就可以强制转换了 或者直接用“”包起来</strong></p>
<pre><code>        int n1 = 100;
		float f1 = 1.1F;
		double d1 = 4.5;
		boolean b1 = true;
		String s1 = n1 + &quot;&quot;;
		String s2 = f1 + &quot;&quot;;
		String s3 = d1 + &quot;&quot;;
		String s4 = b1 + &quot;&quot;;
		System.out.println(s1+&quot; &quot;+s2+&quot; &quot;+s3+&quot; &quot;+s4);
        结果：100 1.1 4.5 true
</code></pre>
<h3 id="string类型转基本数据类型">String类型转基本数据类型</h3>
<p>比较麻烦一点需要用基本类型的包装类调用parseXXX方法<br>
<em>使用基本数据类型对应的包装类，相应方法，得到基本数据类型</em></p>
<pre><code>        int num1 Integer.parseInt(s5);
		double num2 Double.parseDouble(s5);
		float num3 FLoat.parseFloat(s5);
		Long num4 Long.parseLong(s5);
		byte num5 Byte.parseByte(s5);
		boolean b Boolean.parseBoolean(&quot;true&quot;);
		short num6 Short.parseshort(s5);
</code></pre>
<p><em>在将String类型转成基本数据类型时，要确保String类型能够转成有效的数据，比如我们可以把&quot;123”，转成一个整数，但是不能把&quot;hlo&quot;转成一个整数如果格式不正确，就会抛出异常，程序就会终止，这个问题在异常处理章节中，会处理</em></p>
<h1 id="算术运算符">算术运算符</h1>
<ol>
<li>+,-,*,/,%,++,-,重点讲解/、%、++</li>
<li>自增：++作为独立的语句使用：前++和后++都完全等价于i=i+1;作为表达式使用<br>
前++：++先自增后赋值<br>
后++：i++先赋值后自增</li>
<li>+、-、*是一个道理，完全可以类推。<br>
<strong>面试题</strong></li>
</ol>
<pre><code>int i = 1;
int = i++;
System.out.println(i);
问结果是多少？ why？
</code></pre>
<p>首先计算机会使用一个临时变量 temp<br>
<mark>temp=i; i=i+1; i=temp;</mark><br>
因此 i最后=1；<br>
<strong>面试题2</strong></p>
<pre><code>int i = 1;
int = ++i;
System.out.println(i);
问结果是多少？ why？
</code></pre>
<p>首先计算机会使用一个临时变量 temp<br>
<mark>i=i+1；temp=i; i=temp;</mark><br>
因此 i最后=2；<br>
<em>67</em></p>
]]></content>
    </entry>
</feed>